diff --git a/node_modules/react-native-scrypt/android/build.gradle b/node_modules/react-native-scrypt/android/build.gradle
index dac9cc5..cc29045 100644
--- a/node_modules/react-native-scrypt/android/build.gradle
+++ b/node_modules/react-native-scrypt/android/build.gradle
@@ -54,6 +54,5 @@ repositories {
 }
 
 dependencies {
-    compile 'com.facebook.react:react-native:+'
+    implementation 'com.facebook.react:react-native:+'
 }
-
diff --git a/node_modules/react-native-scrypt/android/src/main/java/com/crypho/scrypt/RNScryptModule.java b/node_modules/react-native-scrypt/android/src/main/java/com/crypho/scrypt/RNScryptModule.java
index f349b7f..306be29 100644
--- a/node_modules/react-native-scrypt/android/src/main/java/com/crypho/scrypt/RNScryptModule.java
+++ b/node_modules/react-native-scrypt/android/src/main/java/com/crypho/scrypt/RNScryptModule.java
@@ -44,6 +44,21 @@ public class RNScryptModule extends ReactContextBaseJavaModule {
     }
   }
  
+  @ReactMethod(isBlockingSynchronousMethod = true)
+  public String scryptSync(
+          String passwd,
+          String salt,
+          Integer N,
+          Integer r,
+          Integer p,
+          Integer dkLen) {
+    final byte[] passwordBytes = hexStringToByteArray(passwd);
+    final byte[] ssalt = hexStringToByteArray(salt);
+    byte[] res = scryptBridgeJNI(passwordBytes, ssalt, N, r, p, dkLen);
+    String result = hexify(res);
+    return result;
+  }
+
   private static String hexify(byte[] input) {
     int len = input.length;
     char[] result = new char[2 * len];
diff --git a/node_modules/react-native-scrypt/index.d.ts b/node_modules/react-native-scrypt/index.d.ts
index 20a1a1c..3f47e72 100644
--- a/node_modules/react-native-scrypt/index.d.ts
+++ b/node_modules/react-native-scrypt/index.d.ts
@@ -6,33 +6,25 @@
 // Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
 // TypeScript Version: 3.0
 
-declare module 'react-native-scrypt' {
-  function scrypt (
-    password: string,
-    salt: number[],
-    cost?: number,
-    blocksize?: number,
-    parallel?: number,
-    length?: number,
-    encoding?: 'legacy'
-  ): Promise<string>;
-  function scrypt (
-    password: Buffer,
-    salt: Buffer,
-    cost?: number,
-    blocksize?: number,
-    parallel?: number,
-    length?: number,
-    encoding?: 'buffer'
-  ): Promise<Buffer>;
-  function scrypt (
-    password: string,
-    salt: string,
-    cost?: number,
-    blocksize?: number,
-    parallel?: number,
-    length?: number,
-    encoding?: 'hex' | 'base64'
-  ): Promise<string>;
-  export default scrypt
-}
+export as namespace scrypt;
+
+export type ProgressCallback = (progress: number) => boolean | void;
+
+export function scrypt(
+    password: ArrayLike<number>,
+    salt: ArrayLike<number>,
+    N: number,
+    r: number,
+    p: number,
+    dkLen: number,
+    callback?: ProgressCallback
+): Promise<Uint8Array>;
+
+export function syncScrypt(
+    password: ArrayLike<number>,
+    salt: ArrayLike<number>,
+    N: number,
+    r: number,
+    p: number,
+    dkLen: number
+): Uint8Array;
diff --git a/node_modules/react-native-scrypt/index.js b/node_modules/react-native-scrypt/index.js
index f55e831..a474cd5 100644
--- a/node_modules/react-native-scrypt/index.js
+++ b/node_modules/react-native-scrypt/index.js
@@ -32,7 +32,7 @@ const bitArrayToBuffer = array => {
   return out
 }
 
-export default async function scrypt (passwd, salt, N = 16384, r = 8, p = 1, dkLen = 64, encoding = 'legacy') {
+async function _scrypt (passwd, salt, N = 16384, r = 8, p = 1, dkLen = 64, encoding = 'legacy') {
   let encodedInput = passwd
   let encodedSalt = salt
   if (encoding === 'legacy') {
@@ -51,3 +51,66 @@ export default async function scrypt (passwd, salt, N = 16384, r = 8, p = 1, dkL
   else if (encoding === 'buffer') return Buffer.from(result, 'hex')
   else return result
 }
+
+function _scryptSync (passwd, salt, N = 16384, r = 8, p = 1, dkLen = 64, encoding = 'legacy') {
+  let encodedInput = passwd
+  let encodedSalt = salt
+  if (encoding === 'legacy') {
+    encodedInput = Buffer.from(passwd, 'utf-8').toString('hex')
+    encodedSalt = bitArrayToBuffer(salt).toString('hex')
+  } else if (encoding === 'base64') {
+    encodedInput = Buffer.from(passwd, 'base64').toString('hex')
+    encodedSalt = Buffer.from(salt, 'base64').toString('hex')
+  } else if (encoding === 'buffer') {
+    encodedInput = passwd.toString('hex')
+    encodedSalt = salt.toString('hex')
+  } else if (encoding !== 'hex') throw new Error(`Encoding ${encoding} is invalid, it must be 'legacy', 'base64', 'hex' or 'buffer'`)
+
+  const result = RNScrypt.scryptSync(encodedInput, encodedSalt, N, r, p, dkLen)
+  if (encoding === 'base64') return Buffer.from(result, 'hex').toString('base64')
+  else if (encoding === 'buffer') return Buffer.from(result, 'hex')
+  else return result
+}
+
+(function(root) {
+  const lib = {
+      scrypt: function(password, salt, N, r, p, dkLen, progressCallback) { 
+        return new Promise(function(resolve, reject) {
+              if (progressCallback) { progressCallback(0); }
+              _scrypt(Buffer.from(password), Buffer.from(salt), N, r, p, dkLen, 'buffer').then(res=>{
+                if (progressCallback) { progressCallback(1); }
+                resolve(Buffer.from(res, 'hex'));
+              })
+              .catch(err=>{
+                console.error(err)
+                reject(err);
+              })
+          });
+      },
+      syncScrypt:function(password, salt, N, r, p, dkLen) {
+          return Buffer.from(_scryptSync(password, salt, N, r, p, dkLen, 'buffer'), 'hex');
+      }
+  };
+
+  // node.js
+  if (typeof(exports) !== 'undefined') {
+     module.exports = lib;
+
+  // RequireJS/AMD
+  // http://www.requirejs.org/docs/api.html
+  // https://github.com/amdjs/amdjs-api/wiki/AMD
+  } else if (typeof(define) === 'function' && define.amd) {
+      define(lib);
+
+  // Web Browsers
+  } else if (root) {
+
+      // If there was an existing library "scrypt", make sure it is still available
+      if (root.scrypt) {
+          root._scrypt = root.scrypt;
+      }
+
+      root.scrypt = lib;
+  }
+
+})(this);
\ No newline at end of file
diff --git a/node_modules/react-native-scrypt/ios/RNScrypt.m b/node_modules/react-native-scrypt/ios/RNScrypt.m
index 5cf6fae..715f3cf 100644
--- a/node_modules/react-native-scrypt/ios/RNScrypt.m
+++ b/node_modules/react-native-scrypt/ios/RNScrypt.m
@@ -63,12 +63,16 @@ RCT_REMAP_METHOD(scrypt, scrypt:(NSString *)passwd
     }
 
     @try {
-        success = libscrypt_scrypt((uint8_t *) passwd_buffer, len_passwd / 2, (uint8_t *) salt_buffer, len_salt / 2, N, r, p, hashbuf, dkLen);
+        success = libscrypt_scrypt((uint8_t *) passwd_buffer, len_passwd / 2, (uint8_t *) salt_buffer, len_salt / 2, N, (uint32_t)r, (uint32_t)p, hashbuf, dkLen);
     }
     @catch (NSException * e) {
         NSError *error = [NSError errorWithDomain:@"com.crypho.scrypt" code:200 userInfo:@{@"Error reason": @"Error in scrypt"}];
         reject(@"Failure in scrypt", @"Error", error);
     }
+    @finally {
+        free(passwd_buffer);
+        free(salt_buffer);
+    }
 
     NSMutableString *hexResult = [NSMutableString stringWithCapacity:dkLen * 2];
     for(i = 0;i < dkLen; i++ )
@@ -77,8 +81,56 @@ RCT_REMAP_METHOD(scrypt, scrypt:(NSString *)passwd
     }
     NSString *result = [NSString stringWithString: hexResult];
     resolve(result);
+}
+
+RCT_REMAP_BLOCKING_SYNCHRONOUS_METHOD(scryptSync, NSString *, scryptSync:(NSString *)passwd
+                                      salt:(NSString *)salt
+                                      N:(NSUInteger)N
+                                      r:(NSUInteger)r
+                                      p:(NSUInteger)p
+                                      dkLen:(NSUInteger)dkLen){
+    int i, success;
+    uint8_t hashbuf[dkLen];
+
+    const char *chars_passwd = [passwd UTF8String];
+    int j = 0;
+    long len_passwd = passwd.length;
+    uint8_t *passwd_buffer = malloc(sizeof(uint8_t) * len_passwd / 2);
+
+    char byteChars[3] = {'\0','\0','\0'};
+    unsigned long wholeByte;
+
+    while (j < len_passwd) {
+        byteChars[0] = chars_passwd[j++];
+        byteChars[1] = chars_passwd[j++];
+        wholeByte = strtoul(byteChars, NULL, 16);
+        passwd_buffer[(j / 2) - 1] = wholeByte;
+    }
+
+    const char *chars_salt = [salt UTF8String];
+    j = 0;
+    long len_salt = salt.length;
+    uint8_t *salt_buffer = malloc(sizeof(uint8_t) * len_salt / 2);
+
+    while (j < len_salt) {
+        byteChars[0] = chars_salt[j++];
+        byteChars[1] = chars_salt[j++];
+        wholeByte = strtoul(byteChars, NULL, 16);
+        salt_buffer[(j / 2) - 1] = wholeByte;
+    }
+
+    success = libscrypt_scrypt((uint8_t *) passwd_buffer, len_passwd / 2, (uint8_t *) salt_buffer, len_salt / 2, N, (uint32_t)r, (uint32_t)p, hashbuf, dkLen);
+
     free(passwd_buffer);
     free(salt_buffer);
+    
+    NSMutableString *hexResult = [NSMutableString stringWithCapacity:dkLen * 2];
+    for(i = 0;i < dkLen; i++ )
+    {
+        [hexResult appendFormat:@"%02x", hashbuf[i]];
+    }
+    NSString *result = [NSString stringWithString: hexResult];
+    return result;
 }
 
 @end
