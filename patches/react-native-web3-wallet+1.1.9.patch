diff --git a/node_modules/react-native-web3-wallet/index.js b/node_modules/react-native-web3-wallet/index.js
index 882a0db..7ef7144 100644
--- a/node_modules/react-native-web3-wallet/index.js
+++ b/node_modules/react-native-web3-wallet/index.js
@@ -18,7 +18,7 @@ import { BigNumber, ethers } from "ethers";
  * @param {boolean} [needPublicKey=false]
  * @return {Promise<{mnemonic:[],keystore:{},shuffleMnemonic:[],publicKey:'',privateKey:''}>} 
  */
-export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16, needPrivateKey = false, needPublicKey = false){
+ export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16, needPrivateKey = false, needPublicKey = false){
     return new Promise((fulfill, reject)=>{
         try {
             console.log('create begin');
@@ -32,35 +32,40 @@ export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16,
             var end = performance.now();
             console.log('mnemonic done', `${end - start}ms\n`);
         
-            let wallet = ethers.Wallet.fromMnemonic(mnemonic, path);
-        
-            end = performance.now();
-            console.log('wallet init', `${end - start}ms\n`);
-            
-            let mnemonicArr = mnemonic.split(' ');
-            let shuffleMnemonicArr = shuffleArray(mnemonicArr);
-
-            wallet.encrypt(password).then(res=>{
-                end = performance.now();
-                let jsonObj = JSON.parse(res);
+            ethers.Wallet.fromMnemonic(mnemonic, path)
+                .then(wallet => {
+                    end = performance.now();
+                    console.log('wallet init', `${end - start}ms\n`);
+                    
+                    let mnemonicArr = mnemonic.split(' ');
+                    let shuffleMnemonicArr = shuffleArray(mnemonicArr);
+
+                    wallet.encrypt(password).then(res=>{
+                        end = performance.now();
+                        let jsonObj = JSON.parse(res);
+                        
+                        let response = {
+                            mnemonic : mnemonicArr, 
+                            keystore : jsonObj,
+                            shuffleMnemonic : shuffleMnemonicArr,
+                        };
+                        if(needPublicKey){
+                            response.publicKey=wallet.publicKey;
+                        }
+                        if(needPrivateKey){
+                            response.privateKey=wallet.privateKey;
+                        }
                 
-                let response = {
-                    mnemonic : mnemonicArr, 
-                    keystore : jsonObj,
-                    shuffleMnemonic : shuffleMnemonicArr,
-                };
-                if(needPublicKey){
-                    response.publicKey=wallet.publicKey;
-                }
-                if(needPrivateKey){
-                    response.privateKey=wallet.privateKey;
-                }
+                        fulfill(response)
+                    })
+                    .catch(err=>{
+                        reject(err);
+                    }); 
+                })
+                .catch(err=>{
+                    reject(err);
+                });
 
-                fulfill(response)
-            })
-            .catch(err=>{
-                reject(err);
-            }); 
         } catch (error) {
             reject(error);
         }
@@ -75,11 +80,16 @@ export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16,
  * @param {string} path
  * @return {Promise<string>} 
  */
-export function exportPrivateKeyFromMnemonic(mnemonic, path){
+ export function exportPrivateKeyFromMnemonic(mnemonic, path){
     return new Promise((fulfill, reject)=>{
         try {
-            let wallet = ethers.Wallet.fromMnemonic(mnemonic, path)
-            fulfill(wallet.privateKey);
+            ethers.Wallet.fromMnemonic(mnemonic, path)
+                .then(wallet => {
+                    fulfill(wallet.privateKey);
+                })
+                .catch(err=>{
+                    reject(err);
+                });
         } catch (error) {
             reject(error);
         }
@@ -202,27 +212,32 @@ export function importPrivateKey(privateKey, password, needPrivateKey = false, n
  * @param {boolean} [needPublicKey=false]
  * @return {Promise<{keystore:{},publicKey:'',privateKey:''}>} 
  */
-export function importMnemonic(mnemonic, password, path = "m/44'/60'/0'/0/0", needPrivateKey = false, needPublicKey = false){
+ export function importMnemonic(mnemonic, password, path = "m/44'/60'/0'/0/0", needPrivateKey = false, needPublicKey = false){
     return new Promise((fulfill, reject)=>{
         try {
-            let wallet = ethers.Wallet.fromMnemonic(mnemonic, path);
-            wallet.encrypt(password).then(res=>{
-                let jsonObj = JSON.parse(res);
-
-                let response = {
-                    keystore : jsonObj,
-                };
-                if(needPublicKey){
-                    response.publicKey=res.publicKey;
-                }
-                if(needPrivateKey){
-                    response.privateKey=res.privateKey;
-                }
-                fulfill(response);
-            })
-            .catch(err=>{
-                reject(err);importMnemonic()
-            });
+            ethers.Wallet.fromMnemonic(mnemonic, path)
+                .then(wallet => {
+                    wallet.encrypt(password).then(res=>{
+                        let jsonObj = JSON.parse(res);
+        
+                        let response = {
+                            keystore : jsonObj,
+                        };
+                        if(needPublicKey){
+                            response.publicKey=res.publicKey;
+                        }
+                        if(needPrivateKey){
+                            response.privateKey=res.privateKey;
+                        }
+                        fulfill(response);
+                    })
+                    .catch(err=>{
+                        reject(err);
+                    });
+                })
+                .catch(err=>{
+                    reject(err);
+                });
         } catch (error) {
             reject(error);
         }