diff --git a/node_modules/react-native-web3-wallet/index.js b/node_modules/react-native-web3-wallet/index.js
index 4365965..c4653b9 100644
--- a/node_modules/react-native-web3-wallet/index.js
+++ b/node_modules/react-native-web3-wallet/index.js
@@ -29,38 +29,43 @@ export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16,
             let mnemonic = ethers.utils.entropyToMnemonic(privateSeed);
             
             mnemonicPassword = mnemonicPassword ? mnemonicPassword : '';
-            let node = ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword);
-            let hdnode = node.derivePath(path);
-            let mnemonicArr = mnemonic.split(' ');
-            let shuffleMnemonicArr = shuffleArray(mnemonicArr);
-            let response = {
-                mnemonic : mnemonicArr, 
-                shuffleMnemonic : shuffleMnemonicArr,
-                address : hdnode.address,
-            };
-            if(needPublicKey){
-                response.publicKey=hdnode.publicKey;
-            }
-            if(needPrivateKey){
-                response.privateKey=hdnode.privateKey;
-            }
+            ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword)
+                .then(node=>{
+                    let hdnode = node.derivePath(path);
+                    let mnemonicArr = mnemonic.split(' ');
+                    let shuffleMnemonicArr = shuffleArray(mnemonicArr);
+                    let response = {
+                        mnemonic : mnemonicArr, 
+                        shuffleMnemonic : shuffleMnemonicArr,
+                        address : hdnode.address,
+                    };
+                    if(needPublicKey){
+                        response.publicKey=hdnode.publicKey;
+                    }
+                    if(needPrivateKey){
+                        response.privateKey=hdnode.privateKey;
+                    }
 
-            if(needKeystore){
-                let wallet = new ethers.Wallet(mnemonicPassword ? hdnode.privateKey : hdnode)
-                wallet.encrypt(password).then(res=>{
-                    let jsonObj = JSON.parse(res);
+                    if(needKeystore){
+                        let wallet = new ethers.Wallet(mnemonicPassword ? hdnode.privateKey : hdnode)
+                        wallet.encrypt(password).then(res=>{
+                            let jsonObj = JSON.parse(res);
                         
-                    response.keystore = jsonObj;
+                            response.keystore = jsonObj;
                 
-                    fulfill(response)
+                            fulfill(response)
+                        })
+                        .catch(err=>{
+                            reject(err);
+                        });
+                    }
+                    else{
+                        fulfill(response) 
+                    }
                 })
                 .catch(err=>{
-                    reject(err);
+                        reject(err);
                 });
-            }
-            else{
-                fulfill(response) 
-            } 
         } catch (error) {
             reject(error);
         }
@@ -78,14 +83,15 @@ export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16,
  */
 export function exportPrivateKeyFromMnemonic(mnemonic, path = "m/44'/60'/0'/0/0", password = ''){
     return new Promise((fulfill, reject)=>{
-        try {
-            password = password ? password : '';
-            let node = ethers.utils.HDNode.fromMnemonic(mnemonic, password);
-            let hdnode = node.derivePath(path);
-            fulfill(hdnode.privateKey);
-        } catch (error) {
-            reject(error);
-        }
+        password = password ? password : '';
+        ethers.utils.HDNode.fromMnemonic(mnemonic, password)
+            .then(node=>{
+                let hdnode = node.derivePath(path);
+                fulfill(hdnode.privateKey);
+            })
+            .catch(err=>{
+                reject(err);
+            });
     });
 }
 
@@ -145,26 +151,31 @@ export function exportMnemonicFromKeystore(keystore, password){
 export function exportMnemonic(mnemonic, address, path = "m/44'/60'/0'/0/0", password = ''){
     return new Promise((fulfill, reject)=>{
         password = password ? password : '';
-        let node = ethers.utils.HDNode.fromMnemonic(mnemonic, password);
-        let hdnode = node.derivePath(path);
-        let passwordError = false;
-        if(address){
-            if(address.toLowerCase() !== hdnode.address.toLowerCase()){
-                passwordError = true;
-            }
-        }
+        ethers.utils.HDNode.fromMnemonic(mnemonic, password)
+            .then(node=>{
+                let hdnode = node.derivePath(path);
+                let passwordError = false;
+                if(address){
+                    if(address.toLowerCase() !== hdnode.address.toLowerCase()){
+                        passwordError = true;
+                    }
+                }
         
-        if(!passwordError){
-            let mnemonicArr = res.mnemonic.phrase.split(' ');
-            let shuffleMnemonicArr = shuffleArray(mnemonicArr);
-            fulfill({
-                mnemonic : mnemonicArr, 
-                shuffleMnemonic : shuffleMnemonicArr,     
+                if(!passwordError){
+                    let mnemonicArr = res.mnemonic.phrase.split(' ');
+                    let shuffleMnemonicArr = shuffleArray(mnemonicArr);
+                    fulfill({
+                        mnemonic : mnemonicArr, 
+                        shuffleMnemonic : shuffleMnemonicArr,     
+                    });
+                }
+                else{
+                    reject('password is wrong');
+                }
+            })
+            .catch(err=>{
+                reject(err);
             });
-        }
-        else{
-            reject('password is wrong');
-        }
     });
 }
 
@@ -201,20 +212,31 @@ export function exportKeystore(keystore, password){
 export function exportKeystoreFromMnemonic(password, mnemonic, address, path = "m/44'/60'/0'/0/0", mnemonicPassword = ''){
     return new Promise((fulfill, reject)=>{
         mnemonicPassword = mnemonicPassword ? mnemonicPassword : '';
-        let node = ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword);
-        let hdnode = node.derivePath(path);
-        if(address.toLowerCase() === hdnode.address.toLowerCase()){
-            let wallet = new ethers.Wallet(password ? hdnode.privateKey : hdnode)
-            wallet.encrypt(password).then(res=>{
-                fulfill(res);
+        ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword)
+            .then(node=>{
+                let hdnode = node.derivePath(path);
+                let passwordError = false;
+                if(address){
+                    if(address.toLowerCase() !== hdnode.address.toLowerCase()){
+                        passwordError = true;
+                    }
+                }
+                if(!passwordError){
+                    let wallet = new ethers.Wallet(password ? hdnode.privateKey : hdnode)
+                    wallet.encrypt(password).then(res=>{
+                        fulfill(res);
+                    })
+                    .catch(err=>{
+                        reject(err);
+                    });
+                }
+                else{
+                    reject('password is wrong');
+                }
             })
             .catch(err=>{
                 reject(err);
             });
-        }
-        else{
-            reject('password is wrong');
-        }
     });
 }
 
@@ -277,43 +299,44 @@ export function importPrivateKey(privateKey, password, needPrivateKey = false, n
  */
 export function importMnemonic(mnemonic, password, path = "m/44'/60'/0'/0/0", needPrivateKey = false, needPublicKey = false, needKeystore = true, mnemonicPassword = ''){
     return new Promise((fulfill, reject)=>{
-        try {
-            mnemonicPassword = mnemonicPassword ? mnemonicPassword : '';
-            let node = ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword);
-            let hdnode = node.derivePath(path);
-            let mnemonicArr = mnemonic.split(' ');
-            let shuffleMnemonicArr = shuffleArray(mnemonicArr);
-            let response = {
-                mnemonic : mnemonicArr, 
-                shuffleMnemonic : shuffleMnemonicArr,
-                address : hdnode.address,
-            };
+        mnemonicPassword = mnemonicPassword ? mnemonicPassword : '';
+        ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword)
+            .then(node=>{
+                let hdnode = node.derivePath(path);
+                let mnemonicArr = mnemonic.split(' ');
+                let shuffleMnemonicArr = shuffleArray(mnemonicArr);
+                let response = {
+                    mnemonic : mnemonicArr, 
+                    shuffleMnemonic : shuffleMnemonicArr,
+                    address : hdnode.address,
+                };
 
-            if(needPublicKey){
-                response.publicKey=hdnode.publicKey;
-            }
-            if(needPrivateKey){
-                response.privateKey=hdnode.privateKey;
-            }
+                if(needPublicKey){
+                    response.publicKey=hdnode.publicKey;
+                }
+                if(needPrivateKey){
+                    response.privateKey=hdnode.privateKey;
+                }
 
-            let wallet = new ethers.Wallet(mnemonicPassword ? hdnode.privateKey : hdnode)
-            if(needKeystore){
-                wallet.encrypt(password).then(res=>{
-                    let jsonObj = JSON.parse(res);
+                let wallet = new ethers.Wallet(mnemonicPassword ? hdnode.privateKey : hdnode)
+                if(needKeystore){
+                    wallet.encrypt(password).then(res=>{
+                        let jsonObj = JSON.parse(res);
     
-                    response.keystore = jsonObj;
+                        response.keystore = jsonObj;
+                        fulfill(response);
+                    })
+                    .catch(err=>{
+                        reject(err);
+                    });
+                }
+                else{
                     fulfill(response);
-                })
-                .catch(err=>{
-                    reject(err);
-                });
-            }
-            else{
-                fulfill(response);
-            }
-        } catch (error) {
-            reject(error);
-        }
+                }
+            })
+            .catch(err=>{
+                reject(err);
+            });
     });
 }
 
@@ -945,25 +968,30 @@ export function getWalletSignerWithMnemonic(network, mnemonic, address = '', pat
                 }
             }
             password = password ? password : '';
-            let node = ethers.utils.HDNode.fromMnemonic(mnemonic, password)
-            let hdnode = node.derivePath(path);
-
-            let passwordError = false;
-            if(address){
-                if(address.toLowerCase() !== hdnode.address.toLowerCase()){
-                    passwordError = true;
-                }
-            }
+            ethers.utils.HDNode.fromMnemonic(mnemonic, password)
+                .then(node=>{
+                    let hdnode = node.derivePath(path);
+
+                    let passwordError = false;
+                    if(address){
+                        if(address.toLowerCase() !== hdnode.address.toLowerCase()){
+                            passwordError = true;
+                        }
+                    }
 
-            if(!passwordError){
-                let wallet = new ethers.Wallet(password ? hdnode.privateKey : hdnode);
+                    if(!passwordError){
+                        let wallet = new ethers.Wallet(password ? hdnode.privateKey : hdnode);
 
-                let walletWithSigner = wallet.connect(provider);
-                fulfill(walletWithSigner);
-            }
-            else{
-                reject('password is wrong');
-            }
+                        let walletWithSigner = wallet.connect(provider);
+                        fulfill(walletWithSigner);
+                    }
+                    else{
+                        reject('password is wrong');
+                    }
+                })
+                .catch(err=>{
+                    reject(err);
+                });
         } catch (error) {
             reject(error);
         }
