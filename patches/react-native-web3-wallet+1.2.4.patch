diff --git a/node_modules/react-native-web3-wallet/index.js b/node_modules/react-native-web3-wallet/index.js
index 2e54216..73de82b 100644
--- a/node_modules/react-native-web3-wallet/index.js
+++ b/node_modules/react-native-web3-wallet/index.js
@@ -29,38 +29,43 @@ export function createWallet(password, path = "m/44'/60'/0'/0/0", seedByte = 16,
             let mnemonic = ethers.utils.entropyToMnemonic(privateSeed);
             
             mnemonicPassword = mnemonicPassword ? mnemonicPassword : '';
-            let node = ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword);
-            let hdnode = node.derivePath(path);
-            let mnemonicArr = mnemonic.split(' ');
-            let shuffleMnemonicArr = shuffleArray(mnemonicArr);
-            let response = {
-                mnemonic : mnemonicArr, 
-                shuffleMnemonic : shuffleMnemonicArr,
-                address : hdnode.address,
-            };
-            if(needPublicKey){
-                response.publicKey=hdnode.publicKey;
-            }
-            if(needPrivateKey){
-                response.privateKey=hdnode.privateKey;
-            }
+            ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword)
+            .then(node=>{
+                let hdnode = node.derivePath(path);
+                let mnemonicArr = mnemonic.split(' ');
+                let shuffleMnemonicArr = shuffleArray(mnemonicArr);
+                let response = {
+                    mnemonic : mnemonicArr, 
+                    shuffleMnemonic : shuffleMnemonicArr,
+                    address : hdnode.address,
+                };
+                if(needPublicKey){
+                    response.publicKey=hdnode.publicKey;
+                }
+                if(needPrivateKey){
+                    response.privateKey=hdnode.privateKey;
+                }
     
-            if(needKeystore){
-                let wallet = new ethers.Wallet(mnemonicPassword ? hdnode.privateKey : hdnode)
-                wallet.encrypt(password).then(res=>{
-                    let jsonObj = JSON.parse(res);
+                if(needKeystore){
+                    let wallet = new ethers.Wallet(mnemonicPassword ? hdnode.privateKey : hdnode)
+                    wallet.encrypt(password).then(res=>{
+                        let jsonObj = JSON.parse(res);
                             
-                    response.keystore = jsonObj;
+                        response.keystore = jsonObj;
                     
+                        fulfill(response)
+                    })
+                    .catch(err=>{
+                        reject(err);
+                    });
+                }
+                else{
                     fulfill(response) 
-                })
-                .catch(err=>{
-                    reject(err);
-                });
-            }
-            else{
-                fulfill(response) 
-            } 
+                } 
+            })
+            .catch(err=>{
+                reject(err);
+            });
         } catch (error) {
             reject(error);
         }
@@ -80,9 +85,15 @@ export function exportPrivateKeyFromMnemonic(mnemonic, path = "m/44'/60'/0'/0/0"
     return new Promise((fulfill, reject)=>{
         try {
             password = password ? password : '';
-            let node = ethers.utils.HDNode.fromMnemonic(mnemonic, password);
-            let hdnode = node.derivePath(path);
-            fulfill(hdnode.privateKey);
+            ethers.utils.HDNode.fromMnemonic(mnemonic, password)
+            .then(node=>{
+                let hdnode = node.derivePath(path);
+                fulfill(hdnode.privateKey);
+            })
+            .catch(err=>{
+                reject(err);
+            });
+            
         } catch (error) {
             reject(error);
         }
@@ -145,26 +156,31 @@ export function exportMnemonicFromKeystore(keystore, password){
 export function exportMnemonic(mnemonic, address, path = "m/44'/60'/0'/0/0", password = ''){
     return new Promise((fulfill, reject)=>{
         password = password ? password : '';
-        let node = ethers.utils.HDNode.fromMnemonic(mnemonic, password);
-        let hdnode = node.derivePath(path);
-        let passwordError = false;
-        if(address){
-            if(address.toLowerCase() !== hdnode.address.toLowerCase()){
-                passwordError = true;
+        ethers.utils.HDNode.fromMnemonic(mnemonic, password)
+        .then(node=>{
+            let hdnode = node.derivePath(path);
+            let passwordError = false;
+            if(address){
+                if(address.toLowerCase() !== hdnode.address.toLowerCase()){
+                    passwordError = true;
+                }
             }
-        }
             
-        if(!passwordError){
-            let mnemonicArr = hdnode.mnemonic.phrase.split(' ');
-            let shuffleMnemonicArr = shuffleArray(mnemonicArr);
-            fulfill({
-                mnemonic : mnemonicArr, 
-                shuffleMnemonic : shuffleMnemonicArr,     
-            });
-        }
-        else{
-            reject('password is wrong');
-        }
+            if(!passwordError){
+                let mnemonicArr = hdnode.mnemonic.phrase.split(' ');
+                let shuffleMnemonicArr = shuffleArray(mnemonicArr);
+                fulfill({
+                    mnemonic : mnemonicArr, 
+                    shuffleMnemonic : shuffleMnemonicArr,     
+                });
+            }
+            else{
+                reject('password is wrong');
+            }
+        })
+        .catch(err=>{
+            reject(err);
+        });
     });
 }
 
@@ -201,20 +217,25 @@ export function exportKeystore(keystore, password){
 export function exportKeystoreFromMnemonic(password, mnemonic, address, path = "m/44'/60'/0'/0/0", mnemonicPassword = ''){
     return new Promise((fulfill, reject)=>{
         mnemonicPassword = mnemonicPassword ? mnemonicPassword : '';
-        let node = ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword);
-        let hdnode = node.derivePath(path);
-        if(address.toLowerCase() === hdnode.address.toLowerCase()){
-            let wallet = new ethers.Wallet(password ? hdnode.privateKey : hdnode)
-            wallet.encrypt(password).then(res=>{
-                fulfill(res);
-            })
-            .catch(err=>{
-                reject(err);
-            });
-        }
-        else{
-            reject('password is wrong');
-        }
+        ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword)
+        .then(node=>{
+            let hdnode = node.derivePath(path);
+            if(address.toLowerCase() === hdnode.address.toLowerCase()){
+                let wallet = new ethers.Wallet(password ? hdnode.privateKey : hdnode)
+                wallet.encrypt(password).then(res=>{
+                    fulfill(res);
+                })
+                .catch(err=>{
+                    reject(err);
+                });
+            }
+            else{
+                reject('password is wrong');
+            }
+        })
+        .catch(err=>{
+            reject(err);
+        });
     });
 }
 
@@ -279,38 +300,43 @@ export function importMnemonic(mnemonic, password, path = "m/44'/60'/0'/0/0", ne
     return new Promise((fulfill, reject)=>{
         try {
             mnemonicPassword = mnemonicPassword ? mnemonicPassword : '';
-            let node = ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword);
-            let hdnode = node.derivePath(path);
-            let mnemonicArr = mnemonic.split(' ');
-            let shuffleMnemonicArr = shuffleArray(mnemonicArr);
-            let response = {
-                mnemonic : mnemonicArr, 
-                shuffleMnemonic : shuffleMnemonicArr,
-                address : hdnode.address,
-            };
+            ethers.utils.HDNode.fromMnemonic(mnemonic, mnemonicPassword)
+            .then(node=>{
+                let hdnode = node.derivePath(path);
+                let mnemonicArr = mnemonic.split(' ');
+                let shuffleMnemonicArr = shuffleArray(mnemonicArr);
+                let response = {
+                    mnemonic : mnemonicArr, 
+                    shuffleMnemonic : shuffleMnemonicArr,
+                    address : hdnode.address,
+                };
     
-            if(needPublicKey){
-                response.publicKey=hdnode.publicKey;
-            }
-            if(needPrivateKey){
-                response.privateKey=hdnode.privateKey;
-            }
+                if(needPublicKey){
+                    response.publicKey=hdnode.publicKey;
+                }
+                if(needPrivateKey){
+                    response.privateKey=hdnode.privateKey;
+                }
     
-            let wallet = new ethers.Wallet(mnemonicPassword ? hdnode.privateKey : hdnode)
-            if(needKeystore){
-                wallet.encrypt(password).then(res=>{
-                    let jsonObj = JSON.parse(res);
+                let wallet = new ethers.Wallet(mnemonicPassword ? hdnode.privateKey : hdnode)
+                if(needKeystore){
+                    wallet.encrypt(password).then(res=>{
+                        let jsonObj = JSON.parse(res);
         
-                    response.keystore = jsonObj;
+                        response.keystore = jsonObj;
+                        fulfill(response);
+                    })
+                    .catch(err=>{
+                        reject(err);
+                    });
+                }
+                else{
                     fulfill(response);
-                })
-                .catch(err=>{
-                    reject(err);
-                });
-            }
-            else{
-                fulfill(response);
-            }
+                }
+            })
+            .catch(err=>{
+                reject(err);
+            });
         } catch (error) {
             reject(error);
         }
@@ -951,25 +977,30 @@ export function getWalletSignerWithMnemonic(network, mnemonic, address = '', pat
                 }
             }
             password = password ? password : '';
-            let node = ethers.utils.HDNode.fromMnemonic(mnemonic, password)
-            let hdnode = node.derivePath(path);
-
-            let passwordError = false;
-            if(address){
-                if(address.toLowerCase() !== hdnode.address.toLowerCase()){
-                    passwordError = true;
+            ethers.utils.HDNode.fromMnemonic(mnemonic, password)
+            .then(node=>{
+                let hdnode = node.derivePath(path);
+
+                let passwordError = false;
+                if(address){
+                    if(address.toLowerCase() !== hdnode.address.toLowerCase()){
+                        passwordError = true;
+                    }
                 }
-            }
     
-            if(!passwordError){
-                let wallet = new ethers.Wallet(password ? hdnode.privateKey : hdnode);
+                if(!passwordError){
+                    let wallet = new ethers.Wallet(password ? hdnode.privateKey : hdnode);
     
-                let walletWithSigner = wallet.connect(provider);
-                fulfill(walletWithSigner);
-            }
-            else{
-                reject('password is wrong');
-            }
+                    let walletWithSigner = wallet.connect(provider);
+                    fulfill(walletWithSigner);
+                }
+                else{
+                    reject('password is wrong');
+                }
+            })
+            .catch(err=>{
+                reject(err);
+            });
         } catch (error) {
             reject(error);
         }
